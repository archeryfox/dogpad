import React, {useEffect, useState} from 'react';
import useEventStore from '../stores/EventStore.js';
import useAuthStore from '../stores/AuthStore.js';
import {Link} from 'react-router-dom';

const MyEvents = () => {
    const {events, fetchEvents, deleteEvent} = useEventStore();
    const {user} = useAuthStore();
    const [myEvents, setMyEvents] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [eventToDelete, setEventToDelete] = useState(null); // –°–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å

    useEffect(() => {
        if (user) {
            fetchEvents(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        }
    }, [user]);

    useEffect(() => {
        if (events.length > 0 && user) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≥–¥–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const filteredEvents = events.filter(event => event.organizerId === user.id);
            setMyEvents(filteredEvents);
        }
    }, [events, user]);

    const openModal = (eventId) => {
        setEventToDelete(eventId); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        setIsModalOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    };

    const closeModal = () => {
        setIsModalOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setEventToDelete(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    };

    const handleDelete = async () => {
        if (eventToDelete) {
            await deleteEvent(eventToDelete); // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            closeModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        }
    };

    if (!user) {
        return (
            <div className="text-center">
                <h2 className="text-xl font-semibold text-gray-700">–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</h2>
                <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.</p>
            </div>
        );
    }

    return (
        <div className="my-events-container max-w-2xl mx-auto p-6 bg-white shadow-md rounded-lg space-y-4">
            <h2 className="text-2xl font-semibold text-gray-700 mb-4">–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>

            {myEvents.length === 0 ? (
                <p className="text-center text-gray-500">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.</p>
            ) : (
                <div className="space-y-4">
                    {myEvents.map(event => (
                        <div key={event.id} className="event-card p-4 border border-gray-200 rounded-lg shadow-md">
                            <h3 className="text-xl font-semibold text-gray-800">{event.name}</h3>
                            <p className="text-gray-600">{event.description.substr(0,10)}</p>
                            <p className="text-gray-500">–î–∞—Ç–∞: {new Date(event.date).toLocaleString()}</p>
                            <div className="flex justify-between items-center mt-4">
                                <Link
                                    to={`/event/${event.id}`}
                                    className="text-blue-500 hover:text-blue-700 font-medium"
                                >
                                   üîé –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                </Link>
                                    <Link to={`/update-event/${event.id}`}
                                          className="text-blue-500 hover:text-blue-700 font-medium">
                                                üñäÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </Link>
                                <span className="text-gray-500">–°—Ç–∞—Ç—É—Å: {event.isPaid ? '–ü–ª–∞—Ç–Ω–æ–µ üí∞' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ üÜì'}</span>
                                <button
                                    onClick={() => openModal(event.id)}
                                    className="text-red-500 hover:text-red-700 font-medium"
                                >
                                   üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
            {isModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                    <div className="bg-white p-6 rounded-lg shadow-md max-w-sm w-full">
                        <h3 className="text-lg font-semibold text-gray-800">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
                        <p className="text-gray-600">–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</p>
                        <div className="mt-4 flex justify-end space-x-4">
                            <button
                                onClick={closeModal}
                                className="px-4 py-2 text-gray-600 bg-gray-200 rounded-lg hover:bg-gray-300"
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                onClick={handleDelete}
                                className="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700"
                            >
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MyEvents;
