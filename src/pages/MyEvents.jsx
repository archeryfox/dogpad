import React, {useEffect, useState} from 'react';
import useEventStore from '../stores/EventStore.js';
import useAuthStore from '../stores/AuthStore.js';
import {Link} from 'react-router-dom';
import { toast } from 'react-toastify';

const MyEvents = () => {
    const {events, fetchEvents, deleteEvent, loading, error} = useEventStore();
    const {user} = useAuthStore();
    const [myEvents, setMyEvents] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [eventToDelete, setEventToDelete] = useState(null);
    const [isDeleting, setIsDeleting] = useState(false);

    useEffect(() => {
        if (user) {
            fetchEvents();
        }
    }, [user]);

    useEffect(() => {
        if (events.length > 0 && user) {
            const filteredEvents = events.filter(event => event.organizerId === user.id);
            setMyEvents(filteredEvents);
        }
    }, [events, user]);

    useEffect(() => {
        if (error) {
            toast.error(error);
        }
    }, [error]);

    const openModal = (eventId) => {
        setEventToDelete(eventId);
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setEventToDelete(null);
    };

    const handleDelete = async () => {
        if (eventToDelete) {
            setIsDeleting(true);
            try {
                await deleteEvent(eventToDelete);
                toast.success('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                fetchEvents();
                closeModal();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
                let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ';
                
                if (error.response) {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    errorMessage = error.response.data?.error || errorMessage;
                }
                
                toast.error(errorMessage);
                // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ EventStore
            } finally {
                setIsDeleting(false);
            }
        }
    };

    if (!user) {
        return (
            <div className="text-center">
                <h2 className="text-xl font-semibold text-gray-700">–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã</h2>
                <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.</p>
            </div>
        );
    }

    return (
        <div className="my-events-container max-w-2xl mx-auto p-6 bg-white shadow-md rounded-lg space-y-4">
            <h2 className="text-2xl font-semibold text-gray-700 mb-4">–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>

            {loading && (
                <div className="text-center py-4">
                    <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
                    <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...</p>
                </div>
            )}

            {!loading && myEvents.length === 0 ? (
                <p className="text-center text-gray-500">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.</p>
            ) : (
                <div className="space-y-4">
                    {myEvents.map(event => (
                        <div key={event.id} className="event-card p-4 border border-gray-200 rounded-lg shadow-md">
                            {event.image && (
                                <img
                                    src={event.image}
                                    alt={event.name}
                                    className="w-full h-48 object-cover mb-4 rounded"
                                />
                            )}
                            <h3 className="text-xl font-semibold text-gray-800">{event.name}</h3>
                            <p className="text-gray-600">{event.description.substr(0, 100)}...</p>
                            <p className="text-gray-500">–î–∞—Ç–∞: {new Date(event.date).toLocaleString()}</p>
                            <div className="flex justify-between items-center mt-4 flex-wrap gap-2">
                                <Link
                                    to={`/event/${event.id}`}
                                    className="text-blue-500 hover:text-blue-700 font-medium"
                                >
                                    üîé –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                </Link>
                                <Link
                                    to={`/update-event/${event.id}`}
                                    className="text-blue-500 hover:text-blue-700 font-medium"
                                >
                                    üñäÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </Link>
                                <span className="text-gray-500">
                                    –°—Ç–∞—Ç—É—Å: {event.isPaid ? '–ü–ª–∞—Ç–Ω–æ–µ üí∞' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ üÜì'}
                                </span>
                                <button
                                    onClick={() => openModal(event.id)}
                                    className="text-red-500 hover:text-red-700 font-medium"
                                >
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {isModalOpen && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                    <div className="bg-white p-6 rounded-lg shadow-md max-w-sm w-full">
                        <h3 className="text-lg font-semibold text-gray-800">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
                        <p className="text-gray-600">–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</p>
                        <div className="mt-4 flex justify-end space-x-4">
                            <button
                                onClick={closeModal}
                                disabled={isDeleting}
                                className="px-4 py-2 text-gray-600 bg-gray-200 rounded-lg hover:bg-gray-300"
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                onClick={handleDelete}
                                disabled={isDeleting}
                                className={`px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 ${isDeleting ? 'opacity-70 cursor-not-allowed' : ''}`}
                            >
                                {isDeleting ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MyEvents;
